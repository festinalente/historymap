$standard-height: 12px;
$standard-border: 2px;
// 12px === standard-height
$mapHeight: calc(100vh - 164px);
// requested pixel specific value
$mapControlsWidth: 325px; 
// $mapWidth: 75vw; 
//$mapWidth: calc(100vw - 325px);
$mapWidth: 100vw; 
//calc(100vh - (2 * 8 * 12px + 2px)); 
$breakpoints: (phone: 320px, tablet: 768px, desktop: 1024px);
body {
  font-family: "Source Sans Pro", sans-serif;
  margin: 0;
  overflow-x: hidden;
}

dialog {
  max-width: 700px;
  background-color: rgba(255, 255, 255, 0.9);
  border-style: none;
  border-radius: 0.4em;
  font-weight: 300;
  padding: 1em;

  .close {
    float: right; 
    font-size: 1.5em;
    cursor: pointer;
  }
}

h4 {
  color: #23374d;
  font-weight: bold;
  font-size: 17px;
  padding-bottom: 8px;
  text-align: center;
  border-bottom: 1px solid #ce5c00;
  padding-bottom: 1em;
}

a {
  font-weight: 700;
  color: #ce5c00;
}

.mainBody {
  height: $mapHeight;
  border-bottom: 2px solid #b0691d;
}

.editLayer, .deleteLayer {
  cursor: pointer;
}

.highlight  {
  animation: bounce .3s linear;
  border: #0f0 solid 2px;
  accent-color: #0f0;
  font-style: italic; 
  line-break: anywhere;
}

.hoverPopUp {
  background-color: rgba(255, 255, 0, 0.5);
  border: solid #FFFF00 2px;
  padding-left: 5px;
  padding-right: 5px;
}

.mapboxgl-popup-content {
  padding: 0px !important;
}

.mapControls::-webkit-scrollbar-thumb {
  background: steelblue;
}

.mapControls::-webkit-scrollbar {
  width: 7px;
}

.mapboxgl-ctrl-zoom-in {
  background-image: "url(data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23333' viewBox='0 0 29 29'%3E%3Cpath d='M14.5 8.5c-.75 0-1.5.75-1.5 1.5v3h-3c-.75 0-1.5.75-1.5 1.5S9.25 16 10 16h3v3c0 .75.75 1.5 1.5 1.5S16 19.75 16 19v-3h3c.75 0 1.5-.75 1.5-1.5S19.75 13 19 13h-3v-3c0-.75-.75-1.5-1.5-1.5z'/%3E%3C/svg%3E);"
}

.hiddenControls {
  margin-left: -$mapControlsWidth;
  opacity: 0;
  transition: 0.3s linear all;
}

.hideMenuTab {
  position: absolute;
  top: 88px;
  left: $mapControlsWidth;
  z-index: 500;
  cursor: pointer;
  height: 51px;
  transition: 0.3s linear all;
}

.mapControls {
  min-width: $mapControlsWidth;
  max-height: $mapHeight;
  opacity: 1; 
  overflow-y: scroll;
  transition: 0.3s linear all;

  .mapControlsLink {
    padding: 0.5em 1em;
    cursor: pointer;
    font-weight: 700;
    text-align: center;
    margin: auto;
    display: block;
  }

  .mapControlsLink::before {
    font-family: "Font Awesome 5 Free"; font-weight: 900; content: "\f0ac";
    color: #555;
    margin-right: 1em; 
  }
  
  .layerform, .styleform {
    overflow: scroll !important;
    margin: 0.5em;
    background: #eee;
    padding: 0.5em;
    border: solid 2px;
    border-radius: 0.5em;
    max-height: 25vh;
  }

  .hiddenContent {
    height: 0;
    opacity: 0;
    transition: 0.2s linear all;
    overflow: hidden;
  }
  
  .hiddenZoom {
    pointer-events: none;
    height: 0;
    opacity: 0;
    transition: 0.2s linear all;
  }
  
  .displayContent {
    height: auto;
    opacity: 1;
    overflow: visible;
  }

  .featureGroupName .displayContent {
    margin-left: 1em;
  }

  .layerControls {
    display: inline-block;
    padding: 0 1em;

    a {
      text-decoration: none;
    }

    i {
      transition: transform .2s;
      font-size: 14px;
    }

    label {
      font-size: 14px;
    }

    i:hover {
      opacity: 0.7;
      transform: scale(1.2);
    }

    input[type='checkbox'] {
      cursor: pointer;
    }

    h4 {
      margin: 1em 0 0.5em;
      padding-bottom: 0.5em;
      text-transform: uppercase;
    }

    .informationSquareIcon {
      color: #e3ed58;
    }

    .zoomToFeatureGroup, .zoomToLayer, .easeToPoint {
      cursor: pointer;
      color: #1d43de;
      // padding-left: 1em;
      float: right;
    }

    .layer, .borough {
      width: calc(100% - 1em);
      height: auto;
      width: 100%; 
    }

    .boroughName {
      text-align: center;
    }

    .featureGroupName {
      text-align: left;
    }
    
    .toggleInfo {
      float: right;
      color: rgb(119, 119, 119);
      cursor: pointer;
    }

    .featureGroup.layersInArea {
      overflow: hidden;
    }

    .toggleVisibility {
      display: inline-block;
      font-style: normal;
      font-variant: normal;
      text-rendering: auto;
      line-height: 1;
      cursor: pointer;
      // keep it above any hidden content that might capture clicks
      z-index: 1000;
      position: relative;
      color: #555;
      padding-right: 0.5em;
    }

    .layerToggle {
      border-bottom: 1px solid #ce5c00;
      padding-bottom: 2.5em;
    }
  }
}

.topMenu {
  // flex-grow: 0; 
  // flex-shrink: 0;
  // flex-basis: 8 * $standard-height;
  flex-direction: row;
  align-items: baseline;
  display: flex;
  flex-direction: row;
  flex-basis: 84px;
  width: 100%;
  border-bottom: $standard-border solid #b0691d;
  align-items: center;

  * > {
    vertical-align: middle;
  }

  .buttonContainer {
    display: flex;
    width: 100%;
    flex-wrap: wrap;
    justify-content: flex-end;
    padding-right: 0.5em;
  }

  .about  {
    float: left;
    color: black;
    text-align: center;
    padding: 10px;
    text-decoration: none;
    font-size: 15px;
    line-height: 25px;
    border-radius: 4px;
    border: solid black;
    font-weight: bold;
    margin-top: 3px;
    margin: 3px;
    font-family: "Arial";
    cursor: pointer; 
  }

  a.encyclopedia {
    float: left;
    color: black;
    text-align: center;
    padding: 10px;
    text-decoration: none;
    font-size: 15px;
    line-height: 25px;
    border-radius: 4px;
    border: solid black;
    font-weight: bold;
    margin-top: 3px;
    margin: 3px;
    font-family: "Arial";
    background-color: #e8e1da;
    cursor: pointer; 

    img {
      vertical-align: text-top;
      padding-left: 2px;
      height: 18px;
      width: 18px; 
    }
  }

  #logo-img-wide {
    max-height: 70px;
    padding: 0.25em 0.25em 0.25em 21px;
  }

  .headerText {
    display: inline-block;
    //margin-top: 2 * $standard-height;
    text-shadow: #717c9b 0px 1px 3px;
    font-size: 1.7em;
    //2 * $standard-height;
    font-family: 'Consolas';
    flex-basis: 100%;
  }
}

.feature {
  padding-left: 1em;
}

.typeBoxText {
  margin-left: 2em;
  font-style: italic; 
}

.datePanel {
  position: absolute;
  background-color: #3887be;
  border: black solid 0.1em;
  border-radius: 0.5em;
  font-size: 34px;
  color: white;
  float: right;
  bottom: 3em;
  right: 1em;
  padding: 0.3em;
}

@charset "UTF-8";

//     _            _           _                           _ _
//    (_)          | |         | |                         | (_)
//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _
//    | | '_ \ / __| | | | |/ _` |/ _ \ | '_ ` _ \ / _ \/ _` | |/ _` |
//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |
//    |_|_| |_|\___|_|\__,_|\__,_|\___| |_| |_| |_|\___|\__,_|_|\__,_|
//
//      Simple, elegant and maintainable media queries in Sass
//                        v1.4.9
//
//        https://eduardoboucas.github.io/include-media
//
//         Authors: Eduardo Boucas (@eduardoboucas)
//                  Hugo Giraudel (@hugogiraudel)
//
//      This project is licensed under the terms of the MIT license
////
/// include-media library public configuration
/// @author Eduardo Boucas
/// @access public
////


///
/// Creates a list of global breakpoints
///
/// @example scss - Creates a single breakpoint with the label `phone`
///  $breakpoints: ('phone': 320px);
///
///$breakpoints: (
///  'phone': 320px,
///  'tablet': 768px,
///  'desktop': 1024px
///) !default;


///
/// Creates a list of static expressions or media types
///
/// @example scss - Creates a single media type (screen)
///  $media-expressions: ('screen': 'screen');
///
/// @example scss - Creates a static expression with logical disjunction (OR operator)
///  $media-expressions: (
///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'
///  );
///
$media-expressions: (
  'screen': 'screen',
  'print': 'print',
  'handheld': 'handheld',
  'landscape': '(orientation: landscape)',
  'portrait': '(orientation: portrait)',
  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',
  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'
) !default;


///
/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals
///
/// @example scss - Interval for pixels is defined as `1` by default
///  @include media('>128px') {}
///
///  /* Generates: */
///  @media (min-width: 129px) {}
///
/// @example scss - Interval for ems is defined as `0.01` by default
///  @include media('>20em') {}
///
///  /* Generates: */
///  @media (min-width: 20.01em) {}
///
/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`
///  @include media('>2.0rem') {}
///
///  /* Generates: */
///  @media (min-width: 2.1rem) {}
///
$unit-intervals: (
  'px': 1,
  'em': 0.01,
  'rem': 0.1,
  '': 0
) !default;

///
/// Defines whether support for media queries is available, useful for creating separate stylesheets
/// for browsers that don't support media queries.
///
/// @example scss - Disables support for media queries
///  $im-media-support: false;
///  @include media('>=tablet') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///  /* Generates: */
///  .foo {
///    color: tomato;
///  }
///
$im-media-support: true !default;

///
/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or
/// intercept the breakpoint will be displayed, any others will be ignored.
///
/// @example scss - This media query will show because it intercepts the static breakpoint
///  $im-media-support: false;
///  $im-no-media-breakpoint: 'desktop';
///  @include media('>=tablet') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///  /* Generates: */
///  .foo {
///    color: tomato;
///  }
///
/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint
///  $im-media-support: false;
///  $im-no-media-breakpoint: 'tablet';
///  @include media('>=desktop') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///  /* No output */
///
$im-no-media-breakpoint: 'desktop' !default;

///
/// Selects which media expressions are allowed in an expression for it to be used when media queries
/// are not supported.
///
/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions
///  $im-media-support: false;
///  $im-no-media-breakpoint: 'desktop';
///  $im-no-media-expressions: ('screen');
///  @include media('>=tablet', 'screen') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///   /* Generates: */
///   .foo {
///     color: tomato;
///   }
///
/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted
///  $im-media-support: false;
///  $im-no-media-breakpoint: 'desktop';
///  $im-no-media-expressions: ('screen');
///  @include media('>=tablet', 'retina2x') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///  /* No output */
///
$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;

////
/// Cross-engine logging engine
/// @author Hugo Giraudel
/// @access private
////


///
/// Log a message either with `@error` if supported
/// else with `@warn`, using `feature-exists('at-error')`
/// to detect support.
///
/// @param {String} $message - Message to log
///
@function im-log($message) {
  @if feature-exists('at-error') {
    @error $message;
  } @else {
    @warn $message;
    $_: noop();
  }

  @return $message;
}


///
/// Wrapper mixin for the log function so it can be used with a more friendly
/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function
/// within functions because it is not possible to include a mixin in a function
/// and use the mixin everywhere else because it's much more elegant.
///
/// @param {String} $message - Message to log
///
@mixin log($message) {
  @if im-log($message) {}
}


///
/// Function with no `@return` called next to `@warn` in Sass 3.3
/// to trigger a compiling error and stop the process.
///
@function noop() {}

///
/// Determines whether a list of conditions is intercepted by the static breakpoint.
///
/// @param {Arglist}   $conditions  - Media query conditions
///
/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint
///
@function im-intercepts-static-breakpoint($conditions...) {
  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);

  @if not $no-media-breakpoint-value {
    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}
  }

  @each $condition in $conditions {
    @if not map-has-key($media-expressions, $condition) {
      $operator: get-expression-operator($condition);
      $prefix: get-expression-prefix($operator);
      $value: get-expression-value($condition, $operator);

      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or
          ($prefix == 'min' and $value > $no-media-breakpoint-value) {
        @return false;
      }
    } @else if not index($im-no-media-expressions, $condition) {
      @return false;
    }
  }

  @return true;
}

////
/// Parsing engine
/// @author Hugo Giraudel
/// @access private
////


///
/// Get operator of an expression
///
/// @param {String} $expression - Expression to extract operator from
///
/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`
///
@function get-expression-operator($expression) {
  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {
    @if str-index($expression, $operator) {
      @return $operator;
    }
  }

  // It is not possible to include a mixin inside a function, so we have to
  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because
  // functions cannot be called anywhere in Sass, we need to hack the call in
  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with
  // Sass 3.3, change this line in `@if im-log(..) {}` instead.
  $_: im-log('No operator found in `#{$expression}`.');
}


///
/// Get dimension of an expression, based on a found operator
///
/// @param {String} $expression - Expression to extract dimension from
/// @param {String} $operator - Operator from `$expression`
///
/// @return {String} - `width` or `height` (or potentially anything else)
///
@function get-expression-dimension($expression, $operator) {
  $operator-index: str-index($expression, $operator);
  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);
  $dimension: 'width';

  @if str-length($parsed-dimension) > 0 {
    $dimension: $parsed-dimension;
  }

  @return $dimension;
}


///
/// Get dimension prefix based on an operator
///
/// @param {String} $operator - Operator
///
/// @return {String} - `min` or `max`
///
@function get-expression-prefix($operator) {
  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');
}


///
/// Get value of an expression, based on a found operator
///
/// @param {String} $expression - Expression to extract value from
/// @param {String} $operator - Operator from `$expression`
///
/// @return {Number} - A numeric value
///
@function get-expression-value($expression, $operator) {
  $operator-index: str-index($expression, $operator);
  $value: str-slice($expression, $operator-index + str-length($operator));

  @if map-has-key($breakpoints, $value) {
    $value: map-get($breakpoints, $value);
  } @else {
    $value: to-number($value);
  }

  $interval: map-get($unit-intervals, unit($value));

  @if not $interval {
    // It is not possible to include a mixin inside a function, so we have to
    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because
    // functions cannot be called anywhere in Sass, we need to hack the call in
    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with
    // Sass 3.3, change this line in `@if im-log(..) {}` instead.
    $_: im-log('Unknown unit `#{unit($value)}`.');
  }

  @if $operator == '>' {
    $value: $value + $interval;
  } @else if $operator == '<' {
    $value: $value - $interval;
  }

  @return $value;
}


///
/// Parse an expression to return a valid media-query expression
///
/// @param {String} $expression - Expression to parse
///
/// @return {String} - Valid media query
///
@function parse-expression($expression) {
  // If it is part of $media-expressions, it has no operator
  // then there is no need to go any further, just return the value
  @if map-has-key($media-expressions, $expression) {
    @return map-get($media-expressions, $expression);
  }

  $operator: get-expression-operator($expression);
  $dimension: get-expression-dimension($expression, $operator);
  $prefix: get-expression-prefix($operator);
  $value: get-expression-value($expression, $operator);

  @return '(#{$prefix}-#{$dimension}: #{$value})';
}

///
/// Slice `$list` between `$start` and `$end` indexes
///
/// @access private
///
/// @param {List} $list - List to slice
/// @param {Number} $start [1] - Start index
/// @param {Number} $end [length($list)] - End index
///
/// @return {List} Sliced list
///
@function slice($list, $start: 1, $end: length($list)) {
  @if length($list) < 1 or $start > $end {
    @return ();
  }

  $result: ();

  @for $i from $start through $end {
    $result: append($result, nth($list, $i));
  }

  @return $result;
}

////
/// String to number converter
/// @author Hugo Giraudel
/// @access private
////


///
/// Casts a string into a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: im-log('Value for `to-number` should be a number or a string.');
  }

  $first-character: str-slice($value, 1, 1);
  $result: 0;
  $digits: 0;
  $minus: ($first-character == '-');
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  // Remove +/- sign if present at first character
  @if ($first-character == '+' or $first-character == '-') {
    $value: str-slice($value, 2);
  }

  @for $i from 1 through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);
}


///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

  @if not index(map-keys($units), $unit) {
    $_: im-log('Invalid unit `#{$unit}`.');
  }

  @return $value * map-get($units, $unit);
}

///
/// This mixin aims at redefining the configuration just for the scope of
/// the call. It is helpful when having a component needing an extended
/// configuration such as custom breakpoints (referred to as tweakpoints)
/// for instance.
///
/// @author Hugo Giraudel
///
/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`
/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`
///
/// @example scss - Extend the global breakpoints with a tweakpoint
///  @include media-context(('custom': 678px)) {
///    .foo {
///      @include media('>phone', '<=custom') {
///       // ...
///      }
///    }
///  }
///
/// @example scss - Extend the global media expressions with a custom one
///  @include media-context($tweak-media-expressions: ('all': 'all')) {
///    .foo {
///      @include media('all', '>phone') {
///       // ...
///      }
///    }
///  }
///
/// @example scss - Extend both configuration maps
///  @include media-context(('custom': 678px), ('all': 'all')) {
///    .foo {
///      @include media('all', '>phone', '<=custom') {
///       // ...
///      }
///    }
///  }
///
@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {
  // Save global configuration
  $global-breakpoints: $breakpoints;
  $global-media-expressions: $media-expressions;

  // Update global configuration
  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;
  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;

  @content;

  // Restore global configuration
  $breakpoints: $global-breakpoints !global;
  $media-expressions: $global-media-expressions !global;
}

////
/// include-media public exposed API
/// @author Eduardo Boucas
/// @access public
////


///
/// Generates a media query based on a list of conditions
///
/// @param {Arglist}   $conditions  - Media query conditions
///
/// @example scss - With a single set breakpoint
///  @include media('>phone') { }
///
/// @example scss - With two set breakpoints
///  @include media('>phone', '<=tablet') { }
///
/// @example scss - With custom values
///  @include media('>=358px', '<850px') { }
///
/// @example scss - With set breakpoints with custom values
///  @include media('>desktop', '<=1350px') { }
///
/// @example scss - With a static expression
///  @include media('retina2x') { }
///
/// @example scss - Mixing everything
///  @include media('>=350px', '<tablet', 'retina3x') { }
///
@mixin media($conditions...) {
  @if ($im-media-support and length($conditions) == 0) or
      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {
    @content;
  } @else if ($im-media-support and length($conditions) > 0) {
    @media #{unquote(parse-expression(nth($conditions, 1)))} {
      // Recursive call
      @include media(slice($conditions, 2)...) {
        @content;
      }
    }
  }
}
@include media(">=desktop") {
  .flexContainer {
    display: inline-flex; 
    flex-direction: row;
    justify-content: center;
    width: 100%; 
  }
  
  .mapControls  {
    // n.b. relative units might be better on more devices
    width: $mapControlsWidth;
    transition: 0.3s linear all;
    background-color: white;
    position: fixed;
    left: 0;
  }

  .mapContainer {
    display: flex; 
    flex-grow: 1;
    flex-shrink: 1;
    flex-basis: $mapWidth;
    flex-direction: column;
    overflow-x: hidden;
    
    .hiddenContent {
      height: 0;
      opacity: 0;
      overflow: hidden;
    }
    
    .displayContent {
      max-height: 76vh;
      opacity: 1;
      overflow: scroll;
    }

    .sideInfoDisplay::-webkit-scrollbar-thumb {
      background: steelblue;
    }
    
    .sideInfoDisplay::-webkit-scrollbar {
      width: 7px;
    }

    .sideInfoDisplay {
      z-index: 3;
      // overflow: scroll;
      width: 33vw;
      transition: 0.2s linear all;
      // height: 75vh;
      position: absolute;
      right: 1em;
      background-color:#ffff7f;
      border: solid #FFFFFF 3px;
      padding: 0.5em;
      overflow-wrap: break-word;
      word-wrap: break-word;
      -ms-word-break: break-all;
      word-break: break-all;
      word-break: break-word;
      -ms-hyphens: auto;
      -moz-hyphens: auto;
      -webkit-hyphens: auto;
      hyphens: auto;
      margin-top: 1em;
      overflow-x: hidden;

      img {
        max-width: 100%;
      }

      p {
        line-height: 2em;
        display: block;
      }

      .boldItalic {
        font-weight: bold;
        span, a {
          font-style: italic;
        }
        span {
          font-weight: normal;
        }
      }

    }

    .map {
      height: $mapHeight;
      position: absolute;
      top: 80px; 
      // 6.5 * $standard-height + $standard-border;
      bottom: 0;
      width: $mapWidth;
    }

    .mapboxgl-canvas {
      width: 100% !important; 
    }
  }
}@include media("<=tablet") {
  .flexContainer {
    display: flex; 
    flex-direction: column;
    justify-content: center;
    width: 100%; 
  }

  .timelineSlider {
    margin-top: 60vh;
  }

  .mapControls  {
    flex-grow: 1;
    flex-shrink: 1;
    flex-basis: 25vw;
    flex-direction: column;
  }

  .mapContainer {
    display: flex; 
    flex-grow: 1;
    position: relative; 

    .datePanel {
      margin-top: 3em;
      right: auto; 
      bottom: auto;
      float: left;
    }

    .map {
      height: $mapHeight;
      position: absolute;
      top: 8 * $standard-height + $standard-border;
      bottom: 0;
      width: 100%;
    }
  }
}.timelineSlider {
  height: 2.7em;
  background-color: rgb(209, 236, 255); 
  border-radius: 0.5em;
  border: 1px solid #666;
  font-family: Segoe UI,Arial,sans-serif;
  font-weight: 700;
  font-size: 1.1em;
  text-align: left;
  margin-top: 10px;
  position: absolute;
  width: calc(100% - 2em);
  margin: 1em;
  bottom: 0;

  .timeline {
    display: flex;
    position: relative;
    border-bottom: 2px darkorange solid;
    padding: 10px 0;
    width: 100%;
    bottom: 5px;
  }

  .timeline > * {
    pointer-events: none;
  }
  
  .year {
    flex: 0 1 20vw;
    text-align: center;
    position: relative;
    padding-right: 5px; 
  }
  
  .year::after {
    content: '';
    display: block;
    width: 50%;
    position: absolute;
    height: 5px;
    bottom: -10px;
    right: 0px;
    background: linear-gradient(to right,rgba(0,0,0,0) 90%,darkorange 95%,rgba(0,0,0,0) 100%);
    background-size: auto;
    background-size: calc(100%/5) calc(100%/5);
    background-size: -o-calc(100%/5) -o-calc(100%/5);
    background-size: -moz-calc(100%/5) -moz-calc(100%/5);
    background-size: -webkit-calc(100%/5) -webkit-calc(100%/5);
  }
  
  .year::before {
    content: '';
    display: block;
    width: 50%;
    position: absolute;
    height: 5px;
    bottom: -10px;
    left: 0px;
    background: linear-gradient(to right,rgba(0,0,0,0) 90%,darkorange 95%,rgba(0,0,0,0) 100%);
      background-size: auto;
    background-size: calc(100%/5) calc(100%/5);
    background-size: -o-calc(100%/5) -o-calc(100%/5);
    background-size: -moz-calc(100%/5) -moz-calc(100%/5);
    background-size: -webkit-calc(100%/5) -webkit-calc(100%/5);
  }
  
  .yearCarat::before {
    content: '';
    display: block;
    width: 50%;
    position: absolute;
    height: 10px;
    bottom: -10px;
    left: 0px;
    background: linear-gradient(to right,rgba(0,0,0,0) 95%,darkorange 100%,rgba(0,0,0,0) 100%);
    background-size: auto;
    background-size: 100% 100%;
  }
  
  .sliderHandle {
    position: absolute;
    z-index: 2;
    width: 1.2em;
    height: 3.3em;
    top: -.3em;
    top: -5px;
    background-color: #555;
    border: 1px solid #666;
    border-radius: 0.5em;
    cursor: pointer;
    overflow: scroll;
    left: calc(50% - 12px); 
    overflow: visible;
  }
  
  .sliderHandle:hover {
    border: 1px solid #59b4d4;
    background-color: #0078a3;
  }
  
  .sliderHandle:active {
    cursor: grab;
  }
  
  .redSlider {
    background-color: #f00;  
  }
  
  .timeLineText {
    font-weight: 800;
    position: absolute;
    top: 0;
  }

  .left {
    left: 40%; 
  }

  .right {
    right: 40%; 
  }
}.admin {
  background-color: rgb(255, 143, 143);
}

.login, form { 
  display: flex;
  flex-direction: column;
  align-items: center;
  vertical-align: middle;
}

.clickPopupAdmin {
 overflow: scroll; 
}